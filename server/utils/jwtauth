const jwt = require("jsonwebtoken");

const JWT_SECRET = process.env.JWT_SECRET || "GroceryStoreManagementSystem";

// Create JWT token
function createToken(user) {
  const payload = { id: user.id, email: user.email, role: user.role || "USER" };
  return jwt.sign(payload, JWT_SECRET, { expiresIn: "24h" });
}

// Verify JWT token
function verifyToken(token) {
  try {
    return jwt.verify(token, JWT_SECRET);
  } catch (err) {
    return null;
  }
}

// Middleware to protect routes
function jwtAuth(req, res, next) {
  const authHeader = req.headers.authorization;
  if (!authHeader) {
    return res.status(403).json({ status: "error", message: "No token provided" });
  }

  const token = authHeader.split(" ")[1]; // Expect "Bearer <token>"
  const decoded = verifyToken(token);
  if (!decoded) {
    return res.status(403).json({ status: "error", message: "Invalid or expired token" });
  }

  req.user = decoded; // attach decoded payload
  next();
}

module.exports = { createToken, verifyToken, jwtAuth };
